from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import QueuePool
from api.config import DATABASE_URL, REDIS_URL
import redis.asyncio as redis  # üöÄ Substitu√≠ aioredis por redis.asyncio

engine = create_engine(DATABASE_URL, poolclass=QueuePool, pool_size=10, max_overflow=20)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# -------------------------------
# üî• NOVA IMPLEMENTA√á√ÉO DO REDIS USANDO redis.asyncio
# -------------------------------
redis_client = None  # Vari√°vel global para armazenar a conex√£o Redis

async def init_redis():
    """Inicializa e retorna a conex√£o com o Redis usando redis.asyncio."""
    return redis.from_url(REDIS_URL, decode_responses=True)

async def get_redis():
    """Obt√©m a conex√£o com o Redis, inicializando se necess√°rio."""
    global redis_client
    if redis_client is None:
        redis_client = await init_redis()
    return redis_client
